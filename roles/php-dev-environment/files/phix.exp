#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun May 19 12:46:30 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn /tmp/phix-installer.sh
match_max 100000
expect -exact "\r
\r
##\r
## Checking your PHP version ...\r
##\r
\r
\r
##\r
## Installing required system packages\r
##\r
\r
\rReading package lists... 0%\r\rReading package lists... 100%\r\rReading package lists... Done\r\r
\rBuilding dependency tree... 0%\r\rBuilding dependency tree... 0%\r\rBuilding dependency tree... 50%\r\rBuilding dependency tree... 50%\r\rBuilding dependency tree       \r\r
\rReading state information... 0%\r\rReading state information... 0%\r\rReading state information... Done\r\r
gcc is already the newest version.\r
libncursesw5-dev is already the newest version.\r
php-pear is already the newest version.\r
php5-dev is already the newest version.\r
php5-xsl is already the newest version.\r
php5-imagick is already the newest version.\r
php5-xdebug is already the newest version.\r
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\r
\r
##\r
## Upgrading PEAR installer to latest version\r
##\r
\r
reading directory /tmp/pear/cache\r
0 cache entries cleared\r
Nothing to upgrade\r
\r
##\r
## Installing additional PHP modules from PECL\r
##\r
\r
downloading ncurses-1.0.2.tgz ...\r
Starting to download ncurses-1.0.2.tgz (16,226 bytes)\r
......done: 16,226 bytes\r
7 source files, building\r
running: phpize\r
Configuring for:\r
PHP Api Version:         20100412\r
Zend Module Api No:      20100525\r
Zend Extension Api No:   220100525\r
enable support for wide chars? \[autodetect\] : "
send -- "\r"
expect -exact "\r
path to ncurses installation? \[autodetect\] : "
send -- "\r"
expect eof
